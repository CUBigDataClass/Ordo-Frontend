{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/Ordo-Frontend/ordo-frontend/src/components/MapChart/index.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import {\n//     ComposableMap,\n//     Geographies,\n//     Geography,\n//     Graticule,\n//     ZoomableGroup\n// } from 'react-simple-maps'\n// const geoUrl =\n//     \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n// const MapChart = () => {\n//     return (\n//         <div>\n//             <ComposableMap\n//                 projectionConfig={{ scale: 150 }}\n//                 style={{\n//                     width: \"100%\",\n//                     height: \"auto\",\n//                 }}\n//             >\n//                 <ZoomableGroup zoom={1}>\n//                 <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n//                     <Geographies geography={geoUrl}>\n//                         {\n//                             ({ geographies }) =>\n//                                 geographies.map(geo => (\n//                                     <Geography\n//                                         key={geo.rsmKey}\n//                                         geography={geo}\n//                                         fill={\"#F5F4F6\"}\n//                                     />\n//                                 ))\n//                         }\n//                     </Geographies>\n//                 </ZoomableGroup>\n//             </ComposableMap>\n//         </div>\n//     )\n// }\n// export default MapChart\nimport React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Graticule, ZoomableGroup } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = () => {\n  _s();\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n      console.log(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 147\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(Graticule, {\n        stroke: \"#E4E5E6\",\n        strokeWidth: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: _ref => {\n          let {\n            geographies\n          } = _ref;\n          return geographies.map(geo => {\n            const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              geography: geo,\n              fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 33\n            }, this);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = MapChart;\nexport default MapChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"MapChart\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/Ordo-Frontend/ordo-frontend/src/components/MapChart/index.js"],"names":["React","useEffect","useState","csv","scaleLinear","ComposableMap","Geographies","Geography","Graticule","ZoomableGroup","geoUrl","colorScale","domain","range","MapChart","data","setData","then","console","log","rotate","scale","length","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","rsmKey"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,WAAT,QAA4B,UAA5B;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,SAHJ,EAIIC,SAJJ,EAKIC,aALJ,QAMO,mBANP;;AAQA,MAAMC,MAAM,GACR,wGADJ;AAGA,MAAMC,UAAU,GAAGP,WAAW,GACzBQ,MADc,CACP,CAAC,IAAD,EAAO,IAAP,CADO,EAEdC,KAFc,CAER,CAAC,SAAD,EAAY,SAAZ,CAFQ,CAAnB;;AAIA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZE,IAAAA,GAAG,CAAE,oBAAF,CAAH,CAA0Bc,IAA1B,CAAgCF,IAAD,IAAU;AACrCC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH,KAHD;AAIH,GALQ,EAKN,EALM,CAAT;AAOA,sBACI,QAAC,aAAD;AACI,IAAA,gBAAgB,EAAE;AACdK,MAAAA,MAAM,EAAE,CAAC,CAAC,EAAF,EAAM,CAAN,EAAS,CAAT,CADM;AAEdC,MAAAA,KAAK,EAAE;AAFO,KADtB;AAAA,2BAMI,QAAC,aAAD;AAAe,MAAA,IAAI,EAAE,CAArB;AAAA,8BACA,QAAC,SAAD;AAAW,QAAA,MAAM,EAAC,SAAlB;AAA4B,QAAA,WAAW,EAAE;AAAzC;AAAA;AAAA;AAAA;AAAA,cADA,EAECN,IAAI,CAACO,MAAL,GAAc,CAAd,iBACG,QAAC,WAAD;AAAa,QAAA,SAAS,EAAEZ,MAAxB;AAAA,kBACK;AAAA,cAAC;AAAEa,YAAAA;AAAF,WAAD;AAAA,iBACGA,WAAW,CAACC,GAAZ,CAAiBC,GAAD,IAAS;AACrB,kBAAMC,CAAC,GAAGX,IAAI,CAACY,IAAL,CAAWC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWJ,GAAG,CAACK,UAAJ,CAAeC,MAA3C,CAAV;AACA,gCACI,QAAC,SAAD;AAEI,cAAA,SAAS,EAAEN,GAFf;AAGI,cAAA,IAAI,EAAEC,CAAC,GAAGf,UAAU,CAACe,CAAC,CAAC,MAAD,CAAF,CAAb,GAA2B;AAHtC,eACSD,GAAG,CAACO,MADb;AAAA;AAAA;AAAA;AAAA,oBADJ;AAOH,WATD,CADH;AAAA;AADL;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAtCD;;GAAMlB,Q;;KAAAA,Q;AAwCN,eAAeA,QAAf","sourcesContent":["// import React from 'react';\n// import {\n//     ComposableMap,\n//     Geographies,\n//     Geography,\n//     Graticule,\n//     ZoomableGroup\n// } from 'react-simple-maps'\n\n// const geoUrl =\n//     \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\n// const MapChart = () => {\n//     return (\n//         <div>\n//             <ComposableMap\n//                 projectionConfig={{ scale: 150 }}\n//                 style={{\n//                     width: \"100%\",\n//                     height: \"auto\",\n//                 }}\n//             >\n\n//                 <ZoomableGroup zoom={1}>\n//                 <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n//                     <Geographies geography={geoUrl}>\n//                         {\n//                             ({ geographies }) =>\n//                                 geographies.map(geo => (\n//                                     <Geography\n//                                         key={geo.rsmKey}\n//                                         geography={geo}\n//                                         fill={\"#F5F4F6\"}\n//                                     />\n//                                 ))\n//                         }\n//                     </Geographies>\n//                 </ZoomableGroup>\n//             </ComposableMap>\n//         </div>\n//     )\n// }\n\n// export default MapChart\n\nimport React, { useEffect, useState } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Graticule,\n    ZoomableGroup\n} from \"react-simple-maps\";\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst colorScale = scaleLinear()\n    .domain([0.29, 0.68])\n    .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = () => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        csv(`/vulnerability.csv`).then((data) => {\n            setData(data);\n            console.log(data)\n        });\n    }, []);\n\n    return (\n        <ComposableMap\n            projectionConfig={{\n                rotate: [-10, 0, 0],\n                scale: 147\n            }}\n        >\n            <ZoomableGroup zoom={1}>\n            <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n            {data.length > 0 && (\n                <Geographies geography={geoUrl}>\n                    {({ geographies }) =>\n                        geographies.map((geo) => {\n                            const d = data.find((s) => s.ISO3 === geo.properties.ISO_A3);\n                            return (\n                                <Geography\n                                    key={geo.rsmKey}\n                                    geography={geo}\n                                    fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                                />\n                            );\n                        })\n                    }\n                </Geographies>\n            )}\n        </ZoomableGroup>\n    </ComposableMap >\n  );\n};\n\nexport default MapChart;\n"]},"metadata":{},"sourceType":"module"}