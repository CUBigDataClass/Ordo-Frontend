{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Desktop/Ordo-Frontend/ordo-frontend/src/components/MapChart/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, memo } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Graticule, ZoomableGroup } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n  if (num > 1000000000) {\n    return Math.round(num / 100000000) / 10 + \"Bn\";\n  } else if (num > 1000000) {\n    return Math.round(num / 100000) / 10 + \"M\";\n  } else {\n    return Math.round(num / 100) / 10 + \"K\";\n  }\n};\n\nconst colorScale = scaleLinear().domain([0.29, 0.68]).range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = _ref => {\n  _s();\n\n  let {\n    setTooltipContent\n  } = _ref;\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    // rm code here and replace with api calls to db\n    // setCountries data from 0-1\n    // Minimum requirements\n    // Array Type\n    // Column names (\"ISO3\", \"Name\")\n    csv(`/vulnerability.csv`).then(data => {\n      setData(data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projectionConfig: {\n      rotate: [-10, 0, 0],\n      scale: 147\n    },\n    children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n      zoom: 1,\n      children: [/*#__PURE__*/_jsxDEV(Graticule, {\n        stroke: \"#E4E5E6\",\n        strokeWidth: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), data.length > 0 && /*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: _ref2 => {\n          let {\n            geographies\n          } = _ref2;\n          return geographies.map(geo => {\n            const d = data.find(s => s.ISO3 === geo.properties.ISO_A3);\n            return /*#__PURE__*/_jsxDEV(Geography, {\n              geography: geo,\n              onMouseEnter: () => {\n                const {\n                  NAME,\n                  POP_EST\n                } = geo.properties;\n                setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n              },\n              onMouseLeave: () => {\n                setTooltipContent(\"\");\n              },\n              style: {\n                default: {\n                  fill: \"#D6D6DA\"\n                },\n                hover: {\n                  fill: \"#F53\"\n                }\n              },\n              fill: d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 37\n            }, this);\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/ubuntu/Desktop/Ordo-Frontend/ordo-frontend/src/components/MapChart/index.js"],"names":["React","useEffect","useState","memo","csv","scaleLinear","ComposableMap","Geographies","Geography","Graticule","ZoomableGroup","geoUrl","rounded","num","Math","round","colorScale","domain","range","MapChart","setTooltipContent","data","setData","then","rotate","scale","length","geographies","map","geo","d","find","s","ISO3","properties","ISO_A3","NAME","POP_EST","default","fill","hover","rsmKey"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, memo } from \"react\";\nimport { csv } from \"d3-fetch\";\nimport { scaleLinear } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Graticule,\n    ZoomableGroup\n} from \"react-simple-maps\";\n\nconst geoUrl =\n    \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst rounded = num => {\n    if (num > 1000000000) {\n        return Math.round(num / 100000000) / 10 + \"Bn\";\n    } else if (num > 1000000) {\n        return Math.round(num / 100000) / 10 + \"M\";\n    } else {\n        return Math.round(num / 100) / 10 + \"K\";\n    }\n};\n\nconst colorScale = scaleLinear()\n    .domain([0.29, 0.68])\n    .range([\"#ffedea\", \"#ff5233\"]);\n\nconst MapChart = ({ setTooltipContent }) => {\n    const [data, setData] = useState([]);\n\n    useEffect(() => {\n        // rm code here and replace with api calls to db\n        // setCountries data from 0-1\n        // Minimum requirements\n            // Array Type\n                // Column names (\"ISO3\", \"Name\")\n        csv(`/vulnerability.csv`).then((data) => {\n            setData(data);\n        });\n    }, []);\n\n    return (\n        <ComposableMap\n            data-tip=\"\"\n            projectionConfig={{\n                rotate: [-10, 0, 0],\n                scale: 147\n            }}\n        >\n            <ZoomableGroup zoom={1}>\n                <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n                {data.length > 0 && (\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map((geo) => {\n                                const d = data.find((s) => s.ISO3 === geo.properties.ISO_A3);\n                                return (\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        geography={geo}\n                                        onMouseEnter={() => {\n                                            const { NAME, POP_EST } = geo.properties;\n                                            setTooltipContent(`${NAME} — ${rounded(POP_EST)}`);\n                                        }}\n                                        onMouseLeave={() => {\n                                            setTooltipContent(\"\");\n                                        }}\n                                        style={{\n                                            default: {\n                                                fill: \"#D6D6DA\"\n                                            },\n                                            hover: {\n                                                fill: \"#F53\"\n                                            }\n                                        }}\n                                        fill={d ? colorScale(d[\"2017\"]) : \"#F5F4F6\"}\n                                    />\n                                );\n                            })\n                        }\n                    </Geographies>\n                )}\n            </ZoomableGroup>\n        </ComposableMap >\n    );\n};\n\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}